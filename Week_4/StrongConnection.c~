#include <stdlib.h>
#include <stdio.h>
#include <malloc.h>
#include <string.h>
#define ROW_NODES_ALLOC 500

long int **graph_list; // graph adjacent list
long int **graph_list_rev; // reversed graph adjacent list
long int nodes_num = 0;


void PrintGraph()
{
  FILE *graph;
  long int i,j;
  i=0;
  j=0;
  printf("nodes_num: %ld\n", nodes_num);
  if ((graph = fopen("graph.txt", "w")) == NULL)
  {
    printf("File Error\n");
    exit(1);
  }
  while(1)
  {
    if(*(graph_list+i) != NULL)
    {
      j=0;
      fprintf(graph, "%ld ", i+1);
      while (*(*(graph_list+i)+j) != NULL)
      {
        //printf("%d ", *(*(graph_list+i)+j));
        fprintf(graph, "%ld ", *(*(graph_list+i)+j));
        j++;
      }
      //printf("\n");
      fprintf(graph, "\n");      
    }
    i++;
    if (i > (nodes_num-1))
      break;
  }
}

void PrintReverseGraph()
{
  FILE *graph_rev;
  long int i,j;
  i=0;
  j=0;

  if ((graph_rev = fopen("graph_rev.txt", "w")) == NULL)
  {
    printf("File Error\n");
    exit(1);
  }
  while (1)
  {
    if (*(graph_list_rev+i) != NULL)
    {
      j=0;
      fprintf(graph_rev, "%ld ", i+1);
      while (*(*(graph_list_rev+i)+j) != NULL)
      {
        //printf("%d ", *(*(graph_list+i)+j));
        fprintf(graph_rev, "%ld ", *(*(graph_list_rev+i)+j));
        j++;
      }
      //printf("\n");
      fprintf(graph_rev, "\n");
    }
    i++;
    if (i > nodes_num)
      break;
  }
}


void ReadGraphFile()
{
  char buf[50];
  FILE *temp;
  FILE *fp;
  int length;
  int index;
  //int last_tail = -1; // recorde whether the tail is changed, used to reset row_nodes_alloc_flag and row_nodes_alloc_flag_rev
  //int row_nodes_alloc_flag = 0; // indicate when to realloc the row memory
  //int row_nodes_alloc_flag_rev = 0;
  char *number;
  long int tail;
  long int head;
  
  if ((fp = fopen("SCC.txt", "r")) == NULL)
  {
    printf("File Error!\n");
    exit(1);
  }
  /*
  if ((temp = fopen("result.txt", "w")) == NULL)
  {
    printf("File Error!\n");
    exit(1);
  }
  */
  
  while (fgets(buf, 50, fp) != NULL)
  {
    length = strlen(buf);
    buf[length-1] = '\0';
    number = strtok(buf, " ");
    tail = atoi(number);
    number = strtok(NULL, " ");
    head = atoi(number);

    // record the node num
    if (nodes_num < head)
    {
      nodes_num = head;
    }
    if (nodes_num < tail)
    {
      nodes_num = tail;
    }
    /*
    //reset alloc flags
    if (last_tail != tail)
    {
      last_tail = tail;
      row_nodes_alloc_flag = 0;
      row_nodes_alloc_flag_rev = 0;
    }
    */

    //Record origin graph in adjacent list
    if (*(graph_list+tail-1) == NULL)
    {
      //printf("malloc tail: %ld\n", tail);
      *(graph_list+tail-1) = (long int *)malloc(sizeof(long int) * ROW_NODES_ALLOC);
    }
    index = 0;
    while (*(*(graph_list+tail-1)+index) != NULL)
    {
      index++;
    }
    //printf("index: %d\n", index);
    //printf("tail: %ld\n\n", tail);
    /*
    if (index/ROW_NODES_ALLOC > row_nodes_alloc_flag)
    {  
      row_nodes_alloc_flag++;
      *(graph_list+tail-1) = (long int *)realloc(*(graph_list+tail-1), ( sizeof(long int) * ROW_NODES_ALLOC * (index/ROW_NODES_ALLOC + 1)));
      printf("new memory: %d\n", index/ROW_NODES_ALLOC + 1);
      printf("new alloc: %d\n", row_nodes_alloc_flag);
      printf("tail: %ld\n", tail);
    }
    */

      //printf("index: %d\n", index);
    *(*(graph_list+tail-1)+index) = head;
    //printf("tail: %d head: %d\n", tail, *(*(graph_list+tail-1)+index));
    
    
    
    
    // Record reverse graph in adjacent list
    if (*(graph_list_rev+head-1) == NULL)
    {
      //printf("rev: malloc tail: %d\n", head);
      *(graph_list_rev+head-1) = (long int *)malloc(sizeof(long int) * ROW_NODES_ALLOC);
    }
    index = 0;
    while (*(*(graph_list_rev+head-1)+index) != NULL)
    {
      //printf("%d\n", *(*(graph_list_rev+head-1)+index));
      index++;
    }
    //printf("rev: index: %d\n", index);
    /*
    if (index/ROW_NODES_ALLOC > row_nodes_alloc_flag_rev)
    {
      row_nodes_alloc_flag_rev++;
      *(graph_list_rev+head-1) = (long int *)realloc(*(graph_list_rev+head-1), (sizeof(long int) * ROW_NODES_ALLOC * (index/ROW_NODES_ALLOC + 1)));
      printf("new rev memory: %d\n", index/ROW_NODES_ALLOC + 1);
    }
    */
    *(*(graph_list_rev+head-1)+index) = tail;
    //printf("rev: head: %d tail: %d\n", tail, *(*(graph_list_rev+head-1)+index));
    //fprintf(temp, "tail: %d\n", tail);
    //fprintf(temp, "head: %d\n", head);
    //fprintf(temp, "\n");
  }
  PrintGraph();
  PrintReverseGraph();
  fclose(fp);
  //fclose(temp); 
}


int main()
{
  graph_list = (long int **)malloc(sizeof(long int)*200000000);
  graph_list_rev = (long int **)malloc(sizeof(long int)*200000000);
  ReadGraphFile();
}
